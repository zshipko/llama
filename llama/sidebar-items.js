initSidebarItems({"enum":[["AtomicOrdering",""],["AtomicRMWBinOp",""],["AttributeIndex","Attribute placement index"],["BinaryType",""],["ByteOrder",""],["CallConv",""],["CodeGenOptLevel",""],["CodeModel",""],["DiagnosticSeverity",""],["Error","An enumeration of all possible errors"],["Fcmp",""],["Icmp",""],["InlineAsmDialect",""],["Linkage",""],["ModuleFlagBehavior",""],["OpCode",""],["RelocMode",""],["ThreadLocalMode",""],["UnnamedAddr",""],["Visibility",""]],"fn":[["add_symbol","Add a symbol"],["default_target_triple","Get the default target triple"],["load_library","Load a shared library"]],"macro":[["symbol","Add symbols to the global namespace"]],"mod":[["transforms",""]],"struct":[["Attribute","LLVM Attribute"],["BasicBlock","BasicBlock wraps LLVMBasicBlock"],["Binary","Binary is used to store compiled binary objects"],["Builder","A `Builder` is used to create `Instruction`s"],["Codegen","Platform-specific machine code"],["Const","Constant values"],["Context","Context wraps LLVMContext"],["ExecutionEngine","An execution engine can be used to execute JIT compiled code"],["Func","Functions"],["FuncPassManager","PassManager for function optimizations"],["FuncType","Function type"],["Instr","Instruction value"],["InstrAlloca","Alloca instruction"],["InstrCall","Call instruction"],["InstrFcmp","Fcmp instruction"],["InstrGep","GEP instruction"],["InstrIcmp","Icmp instruction"],["InstrIndirectBr","IndirectBr instruction"],["InstrPhi","Phi instruction"],["InstrSwitch","Switch instruction"],["Jit","Jit bundles LLVMContext, LLVMBuilder and LLVMExecutionEngine"],["MemoryBuffer","Memory buffer wraps LLVMMemoryBufferRef"],["Message","Wraps LLVM messages, these are strings that should be freed using LLVMDisposeMessage"],["Metadata","Metadata values"],["Module","Wraps LLVMModule"],["ModulePassManager","PassManager for module optimizations"],["StructType","Struct type"],["Target","LLVMTarget wrapper"],["TargetData","LLVMTargetData wrapper"],["TargetMachine","Information about the target machine"],["Type","LLVMType wrapper"],["Value","LLVM Value wrapper"]],"trait":[["LLVM","Allows for llama types to be converted into LLVM pointers"],["PassManager","PassManager trait is used to define common functionality between the two types of PassManagers"]],"type":[["Transform","An optimization pass"],["TypeKind","Enumerates all possible kinds of types"],["ValueKind","An enumeration of possible Value kinds"]]});